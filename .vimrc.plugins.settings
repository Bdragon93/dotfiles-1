" airline {
  set laststatus=2
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:airline_theme="base16_grayscale"

  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  let g:airline_left_sep = ''
  let g:airline_right_sep = ''
  let g:airline_symbols.linenr = ''
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = ''
  let g:airline_symbols.whitespace = 'ξ'
" }


" ack {
  if executable('ag')
    let g:ackprg = 'ag --vimgrep'
  endif
" }

" nerdtree {
  map <leader>n :NERDTreeToggle<cr>
  let NERDTreeIgnore = ['\.pyc$', '\.lock$', 'vendor', 'bin/', 'target', '__pycache__']
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }

" command-t {
  set wildignore+=*.so,*.lock,*.swp,*.zip,*.o,*.obj,.git,*.a
  set wildignore+=tmp,vendor,target,build,node_modules,bin
  set wildignore+=*.pyc,*.pyo,__pycache__
" }

" tagbar {
  noremap <leader>m :TagbarToggle<CR>
" }

" youcompleteme {
  "let g:ycm_auto_trigger = 0
" }

" syntastic {
  let g:syntastic_always_populate_loc_list = 0
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 0
  let g:syntastic_check_on_wq = 0
" }

" jshint {
  let jshint2_save = 1
" }

" autopep8 {
  let g:autopep8_disable_show_diff=1
  augroup vimrc_write
    au!
    au FileType python autocmd BufWritePre <buffer> call Autopep8()
  augroup end
" }

" GoLang {
  au FileType go nmap gi :GoImports<CR>
  au FileType go nmap gI :GoImport<Space>
  au FileType go nmap gl :GoLint<CR>
" }

" Rust {
  "let g:rust_recommended_style = 0
  let g:syntastic_rust_checkers = ['cargo']
  let g:rustfmt_autosave = 1
" }
"
"
" Supertab {
  let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
" }
